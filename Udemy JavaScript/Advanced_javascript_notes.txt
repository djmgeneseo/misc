// ********************************************************
// ************* EXECUTION CONTEXT = WRAPPER **************
// ********************************************************
	- global = not inside a function
	- EVERYTHING is in global object; initial this points to global object, which is the Window

var a = "Hello World!"
	In console:
	- a is same as window.a

Hoisting: 
	- Can call a function BEFORE it's defined and it'll work
	- Can console.log(a) BEFORE it's defined and it'll output "Undefined"
	- Recognizes where you've created variables and functions. Sets up Memory Space for them.
		> placeholder = undefined. ALL variables are initially set to undefined
		> functions sit in memory in their entirety
	
Undefined ==! not defined. Undefined is a value that means the value hasn't been set. 
(a === undefined)

CREATION PHASE: sets up memory space for variables and functions (in Global Execution Context, which is also created)
	- Global Object
	- 'this'
	- Outer Environment
	- Recognizes where you've created variables and functions. Sets up Memory Space for them.
		> placeholder = undefined. ALL variables are initially set to undefined
		> functions sit in memory in their entirety


EXECUTION PHASE:
	- Single Threaded, Synchronous Execution = Runs code line-by-line, one command at a time
	- when a function is INVOKED, execution context of function is put onto the execution stack. Whatever is ONTOP of execution stack will be run.

Invocation = call the function; run a function. Invoke function a with a();
Variable environment = where variables live (relative to eachother)

SCOPE CHAIN: Where a function or variable is located lexically (physically) determines its outer environment

///////////////////////////////////
	function b() {
		console.log(myVar); // RESULTS IN 1!!! 
	}

	function c() {
		var myVar = 22222;
		b();
	}

	var myVar = 1;
	c();

	- function b() sits in global, so it looks at outer environment for myVar.
	- Scope = where can I find variable
	- each chain link = a lexical environment
///////////////////////////////////
	function c() {

		function b() {
			console.log(myVar); // RESULTS IN 22222!!! 
		}	

		var myVar = 22222;
		b();
	}

	var myVar = 1;
	c();
	// b(); CANNOT CALL B b/c it is no longer located in global execution context.
///////////////////////////////////
	function c() {

		function b() {
			console.log(myVar); // RESULTS IN 1!!! Continues to look DOWN execution stack.
		}	

		b();
	}

	var myVar = 1;
///////////////////////////////////

Asynchronous events
	- Other engines happening outside of the Javascript Engine in the Browser: http request, rendering engine, etc.
	- Javascript ITSELF is synchronous; HOWEVER, other parts of the browser OTHER THAN the Javascript engine may run at the same time

EVENT QUEUE:
	- When browser has an event, the event is placed on queue. 
	- Event IS ONLY LOOKED AT when the STACK IS EMPTY
	- Looks to see if code should be run for event; creates execution context for that function/code
	- Browser puts events onto event queue asynchronously; HOWEVER, Javascript can only handle those events synchronously
	- JAVASCRIPT DEALS WITH ASYNCHRONOUS EVENTS IN A SYNCHRONOUS FASHION BY PLACING THEM ON THE EXECUTION STACK. The 'current' execution stack must finish before looking at the event queue. 

(event loop = how event listener works to constantly check or 'listen' for event)


// ********************************************************
// ************* TYPES AND OPERATORS **************
// ********************************************************

DYNAMIC TYPING:
	- The Javascript engine decides your variable's type "on the fly." No keyword exists that tells what kind of data you intend to put inside of a variable

6 PRIMITIVE TYPES: 
	- A type of data that represents a single value; that is, not an object, because an object represents multiple values
		1. undefined - lack of initialization (you should NOT set variable to this)
		2. null - represents lack of initialization (you can set variable to this)
		3. boolean - true or false
		4. number - floating point number (there's always some decimals). There's only one 	
			'number' type, and it's a floating number. NO integers.
		5. string - A sequence of characters (both '' and "" can be used)
		6. symbol - Used in ES6

OPERATORS:
	- A special function that is syntactically (written) different
	- Generally take in two parameters and return one result
	- addition opoerator is actually a function: + . 
	- infix notation = 3 + 4; operator is between variables
	- postfix = 3 4+

Operator Precedence and Associativity
	- which operator gets called first. Functions are called in order of precedence, and the higher precedence wins
	- Associativity = what order operator functinos get called in: Left-To-Right or Right-To-Left when functions have the same precedence
	HIGHER PRECEDENCE GETS CALLED FIRST: (lookup javascript precedence order cheat sheet)

	var a = 2, b = 3. c = 4;

	a = b = c;

	console.log(a); // = 4
	console.log(b); // = 4
	console.log(c); // = 4

COMPARISON OPERATORS:
	console.log(3<2<2); // TRUE (?!?!?!?)
		- two less than operators have the same precedence; associativity says it's left-to-right
		- so 3<2 = false.
		- (false) < 2; *COERCION*
		- False is coerced into the number 0, so (false)<2 == 0<2 == true

	Number(false) = 0
	Number(undefined) = NaN
	Number(null) = 0

	null == 0 ==> false
	null < 1 ==> true
	"" == 0 ==> true
	"" == false ==> true

var a;

// will attempt to coerce anything into a boolean
if(a) {
	console.log('Something is there.');
}

> nothing will happen
----------------------
HOWEVER: var a = 0; // 0 converts to false
if(a) {
	console.log('Something is there.');
}

> nothing will happen
----------------------
var a = "3";

// will attempt to coerce anything into a boolean
if(a) {
	console.log('Something is there.');
}

> 'Something is there.'
----------------------

//in one js file: 
var libraryName = "Lib 1";

// in other js file:
window.libraryName = window.libraryName || "Lib 2";

// in app.js:
console.log(libraryName); // Lib 1

// ********************************************************
// ************* DEFAULT VALUE **************
// ********************************************************

function greet() {
	name = name || '<your name here>'; // name will return undefined, and || will always return the value that is most easily coerced into true; hence, 0 || 1 = 1;
	console.log('Hello ' + name);

}


// ********************************************************
// ************* EXECUTION CONTEXT = WRAPPER **************
// ********************************************************




// ********************************************************
// ************* EXECUTION CONTEXT = WRAPPER **************
// ********************************************************




// ********************************************************
// ************* EXECUTION CONTEXT = WRAPPER **************
// ********************************************************